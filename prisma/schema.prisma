// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String?
  slug        String?
  icon        String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  characters  Character[] // Bir kategoriye ait tüm karakterler
  DeviceScore DeviceScore[]
}

model Character {
  id              Int              @id @default(autoincrement())
  name            String
  categoryId      Int
  todayActive     Boolean          @default(false)
  category        Category         @relation(fields: [categoryId], references: [id]) // Karakter ile kategori arasındaki ilişki
  characterImages CharacterImage[]
  DeviceScore     DeviceScore[]
}

model CharacterImage {
  count        Int
  character_id Int
  image        String
  level_type   Int       @default(0)
  character    Character @relation(fields: [character_id], references: [id]) // Karakter ile kategori arasındaki ilişki

  @@unique([count, character_id, level_type])
}

model Device {
  device_id   String        @unique
  username    String?       @unique
  DeviceScore DeviceScore[]

  @@index([device_id])
}

model DeviceScore {
  device_id    String
  count        Int        @default(0)
  character_id Int?
  category_id  Int        @default(1)
  level_type   Int        @default(0)
  streak       Int        @default(0)
  maxStreak    Int        @default(0)
  device       Device?    @relation(fields: [device_id], references: [device_id])
  category     Category   @relation(fields: [category_id], references: [id])
  character    Character? @relation(fields: [character_id], references: [id])

  @@unique([category_id, device_id, level_type])
}

model Feedback {
  id       Int     @id @default(autoincrement())
  feedback String?
  rating   String?
}

model Language {
  id                       Int                     @id @default(autoincrement())
  name                     String
  code                     String
  patch_note_localizations PatchNoteLocalization[]
}

model PatchNote {
  id                       Int                     @id @default(autoincrement())
  version                  String
  date                     DateTime                @default(now())
  patch_note_localizations PatchNoteLocalization[]
}

model PatchNoteLocalization {
  id            Int       @id @default(autoincrement())
  change        String
  patch_note_id Int
  patch_note    PatchNote @relation(fields: [patch_note_id], references: [id])
  language_id   Int
  language      Language  @relation(fields: [language_id], references: [id])
}
